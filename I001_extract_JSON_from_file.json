{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_2",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "2",
                    "targetPort": "2_in"
                },
                {
                    "id": "port_2_to_port_1",
                    "sourceNode": "2",
                    "sourcePort": "2_out",
                    "targetNode": "1",
                    "targetPort": "1_in"
                }
            ],
            "hash": "0f2c31765d1aa0d44e7e1bb9747ce3dca2de4cd3",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 19.999999999999986,
                    "y": -5.115907697472721e-13
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 19.999999999999986,
                    "y": 311.9999999999991
                },
                "2": {
                    "data": {
                        "advanced": {
                            "customName": "get_file_information_extract_content",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "get_file_information_extract_content",
                        "id": "2",
                        "inputParameters": [
                            "playbook_input:vault_id"
                        ],
                        "outputVariables": [
                            "data_list"
                        ],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "2",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phantom.debug(playbook_input_vault_id)\n    phantom.debug(playbook_input_vault_id_values)\n    import re\n    def check_and_format_json(data):\n        if isinstance(data, str):  # If data is a string, we try to load it as JSON\n            try:\n                # Check if the string contains 'false' or 'true'\n                if re.search(r\"'false'|'true'\", data, re.IGNORECASE):\n                    # Replace 'false' and 'true' with \"false\" and \"true\"\n                    data = re.sub(r\"'false'\", '\"false\"', data, flags=re.IGNORECASE)\n                    data = re.sub(r\"'true'\", '\"true\"', data, flags=re.IGNORECASE)\n                else:\n                    data = data.replace(\"'\", '\"')  # Replace single quotes with double quotes\n                \n                data = json.loads(data)  # Try to parse string as JSON\n                phantom.debug(\"The string is a valid JSON.\")\n            except json.JSONDecodeError:\n                phantom.debug(\"The string is not a valid JSON.\")\n                pass\n        elif isinstance(data, dict):  # If data is a dictionary, we dump it into a JSON string\n            try:\n                data = json.dumps(data)\n                phantom.debug(\"The dictionary has been formatted into a valid JSON string:\", data)\n            except (TypeError, ValueError):\n                phantom.debug(\"The dictionary could not be formatted into a valid JSON string.\")\n        else:\n            phantom.debug(\"The data is neither a dictionary nor a JSON string.\")\n        phantom.debug(f\"JSON Daten: {data}\")\n        return data\n    \n    \n    my_list = []\n    \n    for item in playbook_input_vault_id_values[0]:\n        success, message, vault_info = phantom.vault_info(vault_id=item)\n        path = vault_info[0][\"path\"]\n        \n        with open(path, 'r') as file:\n            data = json.load(file)\n            entry = {\n                \"name\": data['sop_json']['name'],\n                \"sop_json\": check_and_format_json(data.get('sop_json')),\n                \"version\": data.get('version'),\n                \"automation_phase\": data.get('automation_phase'),\n                \"alert\": data.get('alert'),\n                \"creator\": data.get('creator')\n            }\n            \n            my_list.append(entry)\n        \n            name = \"SOP \" + data['sop_json']['name']\n            raw = {}\n            cef = {}\n            cef['sop_json'] = check_and_format_json(data.get('sop_json'))\n            cef['name'] = str(data['sop_json']['name'])\n            cef['version'] = str(data.get('version'))\n            cef['creator'] = str(data.get('creator'))\n            cef['automation_phase'] = str(data.get('automation_phase'))\n            cef['alert'] = str(data.get('alert'))\n            success, message, artifact_id = phantom.add_artifact(container=container, raw_data=raw, cef_data=cef, label='sop',name=name, severity='low',identifier=None)\n\n            phantom.debug('artifact added as id:'+str(artifact_id))\n    \n            \n    phantom.debug(my_list)\n    get_file_information_extract_content__data_list = my_list\n",
                    "warnings": {},
                    "x": -1.4210854715202004e-14,
                    "y": 139.99999999999994
                }
            },
            "notes": ""
        },
        "input_spec": [
            {
                "contains": [],
                "description": "",
                "name": "vault_id"
            }
        ],
        "output_spec": [
            {
                "contains": [],
                "datapaths": [
                    "get_file_information_extract_content:custom_function:data_list"
                ],
                "deduplicate": false,
                "description": "",
                "metadata": {},
                "name": "data_list"
            }
        ],
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "6.0.2.127725"
    },
    "create_time": "2023-07-18T12:36:48.679021+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}