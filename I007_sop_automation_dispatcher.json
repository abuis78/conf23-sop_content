{
    "blockly": false,
    "blockly_xml": "<xml></xml>",
    "category": "Uncategorized",
    "coa": {
        "data": {
            "description": "",
            "edges": [
                {
                    "id": "port_0_to_port_5",
                    "sourceNode": "0",
                    "sourcePort": "0_out",
                    "targetNode": "5",
                    "targetPort": "5_in"
                }
            ],
            "hash": "f01e91a9a0fa667865f0682c978dd4296214a91a",
            "nodes": {
                "0": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_start",
                        "id": "0",
                        "type": "start"
                    },
                    "errors": {},
                    "id": "0",
                    "type": "start",
                    "warnings": {},
                    "x": 1000,
                    "y": 419.9999999999999
                },
                "1": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionName": "on_finish",
                        "id": "1",
                        "type": "end"
                    },
                    "errors": {},
                    "id": "1",
                    "type": "end",
                    "warnings": {},
                    "x": 1000,
                    "y": 1000
                },
                "2": {
                    "data": {
                        "advanced": {
                            "join": []
                        },
                        "functionId": 1,
                        "functionName": "add_comment_1",
                        "id": "2",
                        "selectMore": false,
                        "tab": "apis",
                        "type": "utility",
                        "utilities": {
                            "comment": {
                                "description": "",
                                "fields": [
                                    {
                                        "description": "",
                                        "label": "comment",
                                        "name": "comment",
                                        "placeholder": "Enter a comment",
                                        "renderType": "datapath",
                                        "required": true
                                    },
                                    {
                                        "hidden": true,
                                        "name": "container",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "author",
                                        "required": false
                                    },
                                    {
                                        "hidden": true,
                                        "name": "trace",
                                        "required": false
                                    }
                                ],
                                "label": "add comment",
                                "name": "comment"
                            }
                        },
                        "utilityType": "api",
                        "values": {
                            "comment": {
                                "_internal": [
                                    "container",
                                    "author",
                                    "trace"
                                ],
                                "comment": "playbook_input:automation_phase"
                            }
                        }
                    },
                    "errors": {},
                    "id": "2",
                    "type": "utility",
                    "warnings": {
                        "context": [
                            "Connect block to playbook flow."
                        ]
                    },
                    "x": 580,
                    "y": 580
                },
                "5": {
                    "data": {
                        "advanced": {
                            "customName": "set automation phase",
                            "customNameId": 0,
                            "join": []
                        },
                        "functionId": 2,
                        "functionName": "set_automation_phase",
                        "id": "5",
                        "inputParameters": [
                            "playbook_input:automation_phase",
                            "container:id"
                        ],
                        "outputVariables": [],
                        "type": "code"
                    },
                    "errors": {},
                    "id": "5",
                    "type": "code",
                    "userCode": "\n    # Write your custom code here...\n    phase = playbook_input_automation_phase_values[0]\n    success, message = phantom.set_phase(container=id_value,phase=phase)\n    success, message, phase_id, phase_name = phantom.get_phase()\n    phantom.debug(phase_id)\n    \n    url_filter = \"?_filter_container_id=\" + str(id_value) + \"&_filter_phase=\" + str(phase_id)\n    rest_url = phantom.build_phantom_rest_url('workbook_task')\n    url = rest_url + url_filter\n    \n    response = phantom.requests.get(url,verify=False,)\n    \n    data = response.json()\n    phantom.debug(data[\"data\"])\n    \n    for task in data[\"data\"]:\n        phantom.debug(task)\n        # get the ID of the Playbook\n        #url_filter = '?_filter_name=\"'+ task['data']['name'] + '\"'\n        #url_playbook = phantom.build_phantom_rest_url('playbook')\n        #url = url_playbook + url_filter\n        #response = phantom.requests.get(url,verify=False)\n        #playbook_id = response.json()['data'][0]['id']\n        #phantom.debug(playbook_id)\n        \n        # trigger the Playbook\n        #url_run_playbook = phantom.build_phantom_rest_url('playbook_run')\n       # data = {'container_id': id_value, 'playbook_id': playbook_id, 'scope': 'new', 'run': 'true'}\n       # headers = {'Content-type': 'application/json', 'Accept': 'text/plain'}\n       # response3 = phantom.requests.post(url_run_playbook, data=json.dumps(data), headers=headers, verify=False)\n        #phantom.debug(\"phantom returned status code {} with message {}\".format(response3.status_code, response3.text))\n",
                    "warnings": {},
                    "x": 980,
                    "y": 560
                }
            },
            "notes": ""
        },
        "input_spec": [
            {
                "contains": [],
                "description": "",
                "name": "automation_phase"
            }
        ],
        "output_spec": null,
        "playbook_type": "data",
        "python_version": "3",
        "schema": "5.0.10",
        "version": "6.0.2.127725"
    },
    "create_time": "2023-07-12T08:38:00.742899+00:00",
    "draft_mode": false,
    "labels": [
        "*"
    ],
    "tags": []
}